<?xml version="1.0" encoding="UTF-8"?>
<project basedir=".." name="SALVADOR.SASS" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <description>SASS targets of the SUB Ant library</description>

    <!-- Import base lib -->
    <import file="../build.xml"/>
    <!-- SASS depends on JRuby -->
    <import file="./jruby.xml"/>
    <!-- Git is needed to get the sources -->
    <import file="./scm.xml"/>

    <property name="salvador.sass.lib.dir" value="${salvador.base.lib.dir}/sass"/>
    <property name="salvador.sass.downlad.git.url" value="https://github.com/nex3/sass.git"/>

    <!-- Default properties, overide them in including file if you need to -->
    <property name="salvador.sass.compile.watch.src" value="./css"/>
    <property name="salvador.sass.compile.watch.dest" value="./css"/>

    <!-- Uncomment this to use sass from the Git repository -->
    <!--
    <property name="salvador.sass.git" value="true"/>
    -->

    <!-- SASS Stuff, we have two methods, via Git or Ruby Gem, the first one was easier to set up, the last one has more features.
         Git based integration isn't used anymore, just still here for reference.

    <target name="salvador.sass.git.download" depends="salvador.sass.lib.dir.check, salvador.scm.jgit.install" unless="${salvador.sass.lib.dir.exists}">
        <git-clone uri="${sass.downlad.git.url}" dest="${salvador.sass.lib.dir}"/>
    </target>

    Ugly hack to check if Sass is alredy there, otherwise Git will fail 
    See http://stackoverflow.com/questions/1163998/do-i-have-any-way-to-check-the-existence-of-a-directory-in-ant-not-a-file 

    <target name="salvador.sass.lib.dir.check">
        <condition property="salvador.sass.lib.dir.exists">
            <available file="${salvador.sass.lib.dir}" type="dir"/>
        </condition>
    </target>
    -->

    <target name="salvador.sass.gem.check" depends="salvador.jruby.gems">
        <salvador.jruby.gem.check gem="sass"/>
    </target>

    <target name="salvador.sass.check.gem.return" depends="salvador.sass.gem.check">
        <condition property="salvador.sass.gem.exists">
            <equals arg1="${salvador.jruby.gem.check.return.code}" arg2="0"/>
        </condition>
    </target>

    <target name="salvador.sass.gem.download" depends="salvador.sass.check.gem.return" unless="salvador.sass.gem.exists">
        <salvador.jruby.gem.install gem="sass"/>
    </target>

    <target name="salvador.sass.download" depends="salvador.sass.gem.download"/>

    <target name="salvador.sass.compile.watch" depends="salvador.sass.macros">
        <!-- To use this override the properties salvador.sass.compile.watch.src and salvador.sass.compile.watch.dest -->
        <salvador.sass.compile.watch src="${salvador.sass.compile.watch.src}" dest="${salvador.sass.compile.watch.dest}"/>
    </target>

    <target name="salvador.sass.macros" depends="salvador.sass.gem.download">
        <macrodef name="salvador.sass.convert.watch">
            <attribute name="src"/>
            <attribute name="dest"/>
            <sequential>
                <!-- JRuby Commandline: http://kenai.com/projects/jruby/pages/JRubyCommandLineParameters -->
                <java classname="org.jruby.Main" fork="true" dir="." spawn="true">
                    <sysproperty key="jruby.home" value="${salvador.jruby.home}"/>
                    <classpath refid="salvador.jruby.classpath"/>
                    <arg value="-S"/>
                    <arg value="sass"/>
                    <arg value="--watch"/>
                    <arg value="--poll"/>
                    <arg value="--debug-info"/> 
                    <arg value="@{src}:@{dest}"/>
                </java>
            </sequential>
        </macrodef>
        <macrodef name="salvador.sass.convert">
            <attribute name="src"/>
            <attribute name="destfile"/>
            <sequential>
                <!-- JRuby Commandline: http://kenai.com/projects/jruby/pages/JRubyCommandLineParameters -->
                <java classname="org.jruby.Main" fork="true" dir="." spawn="true">
                    <sysproperty key="jruby.home" value="${salvador.jruby.home}"/>
                    <classpath refid="salvador.jruby.classpath"/>
                    <arg value="-S"/>
                    <arg value="sass"/>
                    <arg value="@{src}"/>
                    <arg value="@{destfile}"/>
                </java>
            </sequential>
        </macrodef>
        <macrodef name="salvador.sass.convert.dir">
            <attribute name="refid"/>
            <attribute name="todir"/>
            <sequential>
                <for param="sccs.file">
                    <path>
                        <fileset refid="@{refid}"/>
                    </path>
                    <sequential>
                        <propertyregex property="css.out" input="@{png.file}" regexp="(.*)[\\/](.*)\.scss" select="\2" casesensitive="false"/>
                        <property name="css.file.out" value="@{todir}/${css.out}.css"/>
                        <echo>"Converting SCSS @{scss.file} to ${css.file.out}</echo>
                        <salvador.sass.compile src="@{scss.file}" destfile="${css.file.out}"/>
                    </sequential>
                </for>
            </sequential>
    </target>
    
    <!-- Another approach: http://stackoverflow.com/questions/7262342/sass-to-css-via-an-ant-task-directory-creation -->
    

    <target name="salvador.sass.install" depends="salvador.sass.macros"/>

</project>
