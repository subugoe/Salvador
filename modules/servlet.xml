<?xml version="1.0" encoding="UTF-8"?>
<project basedir=".." name="SALVADOR.SERVLET" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
 <description>Servlets targets of the SUB Ant library</description>

 <!-- Import base lib -->
 <import file="../build.xml"/>
 <!-- Dependencies -->
 <import file="./saxon.xml"/>
 <!-- Import Groovy -->
 <import file="./groovy.xml"/>

 <!-- Set the tranformation for the merge -->
 <property name="salvador.servlet.merge.xslt" value="${salvador.base.dir}/xslt/web.xml-merger.xsl"/>

 <target name="salvador.servlet.install" depends="salvador.saxon.install, salvador.base.ant.contrib.install, salvador.groovy.install">
  <macrodef name="salvador.servlet.merge.single">
   <!-- Input files -->
   <attribute name="in1"/>
   <attribute name="in2"/>
   <!-- Output file -->
   <attribute name="out"/>
   <sequential>
    <salvador.saxon.xslt.params in="@{in1}" style="${salvador.servlet.merge.xslt}" destfile="@{out}" params="merge-xml-file=@{in2}"/>
    <!--
    <xslt in="@{in1}" out="@{out}" style="${salvador.servlet.merge.xslt}">
     <param name="merge-xml-file" expression="@{in2}" type="STRING"/>
    </xslt>
    -->
   </sequential>
  </macrodef>

  <macrodef name="salvador.servlet.merge">
   <attribute name="indir"/>
   <attribute name="pattern"/>
   <attribute name="out"/>
   <sequential>
    <!-- Needed to import variables -->
    <var name="indir" value="@{indir}"/>
    <var name="pattern" value="@{pattern}"/>
    <var name="out" value="@{out}"/>
    <groovy useGroovyShell="true"
     >
     /* A Groovy wrapper for the ant macro above */
     def merge (in1, in2, out) {
        macro = project.createTask("salvador.servlet.merge.single")
        macro.setDynamicAttribute("in1", in1.toString())
        macro.setDynamicAttribute("in2", in2.toString())
        macro.setDynamicAttribute("out", out.toString())
        macro.perform()
     }
     
     /* Get variables from ant */
     def indir = properties['indir']
     def pattern = properties['pattern']
     File out = new File(properties['out']).getAbsoluteFile()
     /* Collect the files to be merged */
     def candidates = ant.fileScanner {
        fileset(dir: indir) {
           include(name: pattern)
        }
     }
     
     print "Processing "
     candidates.each() {
         print it.toString() + ", "
     }
     println ""
     
     def prev = null
     candidates.eachWithIndex() { cur, i ->
        if( prev != null ) println "$prev $cur"
                
        if (i == 0) {
           prev = cur
        } else if (i == 1) {
           println "Merging ${cur} and ${prev} to ${out}"
           merge(prev, cur, out)
        } else if (i > 1) {
           def temp = File.createTempFile('web', '.xml') 
           println "Merging ${cur} and ${out} to ${temp}"
           merge(cur, out, temp)
           println "Renaming ${temp} to ${out}"
           temp.renameTo(out)
        }
     };

    </groovy>
   </sequential>
  </macrodef>
 </target>
</project>
